<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.2</version>
    </parent>
    <groupId>org.wheel</groupId>
    <artifactId>wheel-root</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>
    <modules>
        <module>wheel-a-parent</module>
        <module>wheel-d-plugin</module>
        <module>wheel-d-client</module>
        <module>wheel-b-datasource</module>
        <module>wheel-d-sqlparser</module>
    </modules>
    <properties>
        <!--字符集-->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!--root版本-->
        <wheel-root.version>1.0-SNAPSHOT</wheel-root.version>
        <!--jdk版本-->
        <java.version>1.8</java.version>
        <!--roses-->
        <roses.kernel.version>7.3.4</roses.kernel.version>
        <!--========================工具包插件 start========================-->
        <!--hutool 工具包集合 url： https://www.hutool.cn/docs/       -->
        <hutool.version>5.8.16</hutool.version>
        <!--lombok-->
        <lombok.version>1.18.20</lombok.version>
        <!--velocity 模板-->
        <velocity-engine.version>2.1</velocity-engine.version>
        <!--mybatis-->
        <mybatis.spring-boot.version>1.3.2</mybatis.spring-boot.version>
        <!--mybatis-plus-->
        <mybatis-plus.version>3.5.1</mybatis-plus.version>
        <!--mybatis-plus generator-->
        <mybatis-plus-generator.version>3.5.2</mybatis-plus-generator.version>
        <!--caffeine sql parser-->
        <caffeine.version>1.34.0</caffeine.version>
        <!--========================工具包插件 end========================-->
        <!--========================spring||spring.starter start========================-->
        <!--========================spring||spring.starter end========================-->
        <!--========================数据驱动 start========================-->
        <!--oracle-->
        <oracle.version>11.2.0.3</oracle.version>
        <!--mysql-->
        <mysql-connector-java.version>8.0.21</mysql-connector-java.version>
        <!--sqlserver-->
        <sqlserver.version>4.0</sqlserver.version>
        <!--========================数据驱动 end========================-->
        <!--========================第三方集成插件 start========================-->
        <!--========================第三方集成插件 end========================-->
        <!--========================maven start========================-->
        <maven-plugin.version>3.6.0</maven-plugin.version>
        <maven-plugin-api.version>3.6.0</maven-plugin-api.version>
        <maven-plugin-annotations.version>3.6.0</maven-plugin-annotations.version>
        <maven-project.version>2.0.6</maven-project.version>
        <maven-compiler-plugin.version>3.8.1</maven-compiler-plugin.version>
        <maven-assembly-plugin.version>3.1.0</maven-assembly-plugin.version>
        <maven-jar-plugin.version>3.1.0</maven-jar-plugin.version>
        <maven-dependency-plugin.version>3.1.0</maven-dependency-plugin.version>
        <maven-resources-plugin.version>3.1.0</maven-resources-plugin.version>
        <!--========================maven end========================-->
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- spring starter 模块加载包-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>
    </dependencies>
    <dependencyManagement>
        <dependencies>
            <!--========================maven start========================-->
            <!--Maven Plugin开发的核心API:定义了开发自定义插件时所需的接口、类和约定 -->
            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-plugin-api</artifactId>
                <version>${maven-plugin-api.version}</version>
            </dependency>
            <!--Maven Plugin开发工具库:提供了一些注解-->
            <dependency>
                <groupId>org.apache.maven.plugin-tools</groupId>
                <artifactId>maven-plugin-annotations</artifactId>
                <version>${maven-plugin-annotations.version}</version>
            </dependency>
            <!--Maven Plugin开发核心包:提供了用于构建项目、处理生命周期以及管理构建阶段和目标的核心机制 -->
            <dependency>
                <groupId>org.apache.maven</groupId>
                <artifactId>maven-project</artifactId>
                <version>${maven-project.version}</version>
            </dependency>
            <!--========================maven end========================-->
            <!--========================工具包插件 start========================-->
            <!--hutool-->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>
            <!--lombok-->
            <dependency>
                <groupId>org.projectlombok</groupId>
                <artifactId>lombok</artifactId>
                <version>${lombok.version}</version>
            </dependency>

            <dependency>
                <groupId>org.apache.velocity</groupId>
                <artifactId>velocity-engine-core</artifactId>
                <version>${velocity-engine.version}</version>
            </dependency>
            <!--========================工具包插件 end========================-->
            <!--========================spring||spring.starter start========================-->
            <!--mybatis-plus-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>
            <!--mybatis-plus-generator-->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-generator</artifactId>
                <version>${mybatis-plus-generator.version}</version>
            </dependency>
            <!--========================spring||spring.starter end========================-->

            <!--========================roses||spring.starter start========================-->
            <!--认证和鉴权模块-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>auth-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--安全模块-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>security-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--系统配置-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>config-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--数据源连接和dao框架-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>db-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--文件管理-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>file-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--资源扫描-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>scanner-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--pinyin工具类-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>pinyin-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--字典业务-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>dict-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--参数校验模块-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>validator-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--系统管理基础业务-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>system-integration-rest</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--c端用户-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>customer-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--办公处理-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>office-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--日志模块-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>log-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--定时任务-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>timer-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--短信模块-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>sms-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--消息通知-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>message-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--数据备份和迁移模块-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>migration-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--Socket模块-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>socket-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--wrapper工具-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>wrapper-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--多语言模块-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>i18n-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--多数据源配置-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>ds-container-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--硬件信息获取-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>monitor-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--演示环境api-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>demo-api</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>

            <!--默认增加内存缓存-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>memory-cache-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>
            <!--默认增加内存缓存-->
            <dependency>
                <groupId>cn.stylefeng.roses</groupId>
                <artifactId>redis-spring-boot-starter</artifactId>
                <version>${roses.kernel.version}</version>
            </dependency>
            <!--========================roses||spring.starter end========================-->
            <!--========================wheel||spring.starter end========================-->
            <!--DB数据源管理-->
            <dependency>
                <groupId>org.wheel</groupId>
                <artifactId>datasource-spring-boot-starter</artifactId>
                <version>${wheel-root.version}</version>
            </dependency>
            <!--认证拦截插件-->
            <dependency>
                <groupId>org.wheel</groupId>
                <artifactId>wheel-client-auth-spring-boot-starter</artifactId>
                <version>${wheel-root.version}</version>
            </dependency>
            <!--公共插件-->
            <dependency>
                <groupId>org.wheel</groupId>
                <artifactId>wheel-client-common-spring-boot-starter</artifactId>
                <version>${wheel-root.version}</version>
            </dependency>
            <!--客户端config插件-->
            <dependency>
                <groupId>org.wheel</groupId>
                <artifactId>wheel-client-config-spring-boot-starter</artifactId>
                <version>${wheel-root.version}</version>
            </dependency>
            <!--========================wheel||spring.starter end========================-->

            <!--========================数据驱动 start========================-->
            <!--mysql-->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>${mysql.version}</version>
            </dependency>
            <!--========================数据驱动 end========================-->
            <!--========================内部集成插件 start========================-->
            <!--========================内部集成插件 end========================-->
        </dependencies>
    </dependencyManagement>
    <!--私服-->
    <!--    <repositories>
            <repository>
                <id>spring</id>
                <name>aliyun spring maven</name>
                <url>https://maven.aliyun.com/repository/spring/</url>
                <layout>default</layout>
                &lt;!&ndash; 是否开启发布版构件下载 &ndash;&gt;
                <releases>
                    <enabled>true</enabled>
                </releases>
                &lt;!&ndash; 是否开启快照版构件下载 &ndash;&gt;
                <snapshots>
                    <enabled>false</enabled>
                </snapshots>
            </repository>
        </repositories>-->
    <build>
        <finalName>${project.artifactId}</finalName>
        <pluginManagement>
            <plugins>
                <!--========================Wheel Plugin start========================-->
                <!--代码生成-->
                <plugin>
                    <groupId>org.wheel</groupId>
                    <artifactId>wheel-plugin-generator-mybatis</artifactId>
                    <version>${wheel-root.version}</version>
                </plugin>
                <!--========================Wheel Plugin end========================-->
                <!--用于将 Spring Boot 项目打包为可执行的 JAR 文件，并可以应用 Spring Boot 的热部署特性-->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <executions>
                        <execution>
                            <goals>
                                <!--指定了要执行的插件目标，这里使用了 repackage 目标，表示将项目重新打包为可执行的 JAR 文件-->
                                <goal>repackage</goal>
                            </goals>
                        </execution>
                    </executions>
                    <configuration>
                        <!--配置了是否 fork 一个新的进程来执行 Maven 插件的目标。在这里设置为 true，表示在执行 repackage 目标时，将会 fork 一个新的进程-->
                        <!-- 如果没有该项配置，则devtools不会起作用，即应用不会restart -->
                        <fork>true</fork>
                    </configuration>
                </plugin>
                <!--生成Maven插件的插件:定义标准与结构-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-plugin-plugin</artifactId>
                    <version>${maven-plugin.version}</version>
                </plugin>
                <!--用于处理项目的资源文件-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                    <configuration>
                        <delimiters>
                            <!--配置了用于替换资源文件中占位符的分隔符。在您的配置中，使用了 @ 作为分隔符-->
                            <delimiter>@</delimiter>
                        </delimiters>
                        <!--配置了是否使用默认的占位符分隔符。这里设置为 false，表示不使用默认分隔符-->
                        <useDefaultDelimiters>false</useDefaultDelimiters>
                        <!--项目的资源文件字符编码-->
                        <encoding>${project.build.sourceEncoding}</encoding>
                    </configuration>
                </plugin>
                <!--用于编译 Java 源代码-->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <configuration>
                        <!--定义了编译的源和目标版本-->
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <!--表示项目的源码字符编码-->
                        <encoding>${project.build.sourceEncoding}</encoding>
                        <annotationProcessorPaths>
                            <!--配置了注解处理器的路径。这个配置是为了在编译过程中使用 Lombok 和 MapStruct 等注解处理器。注解处理器可以在编译期间生成一些代码，以简化开发或增加功能-->
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok</artifactId>
                                <version>${lombok.version}</version>
                            </path>
                            <path>
                                <groupId>org.projectlombok</groupId>
                                <artifactId>lombok-mapstruct-binding</artifactId>
                                <version>0.2.0</version>
                            </path>
                        </annotationProcessorPaths>
                    </configuration>
                    <version>${maven-compiler-plugin.version}</version>
                </plugin>
                <!--生成项目源代码和资源的 JAR 包的插件 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-source-plugin</artifactId>
                    <version>${maven-source-plugin.version}</version>
                    <configuration>
                        <!--用于将源码 JAR 附加到项目-->
                        <attach>true</attach>
                    </configuration>
                    <executions>
                        <execution>
                            <!--构建的 compile 阶段执行 maven-source-plugin 来生成源代码 JAR 并将其附加到项目-->
                            <phase>compile</phase>
                            <goals>
                                <goal>jar</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!-- 跳过测试用例 -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                    <configuration>
                        <skip>true</skip>
                    </configuration>
                </plugin>
            </plugins>
        </pluginManagement>
        <resources>
            <resource>
                <!--元素没有指定任何其他的配置选项，因此会使用默认的配置，通常会对资源文件进行占位符替换处理-->
                <directory>src/main/resources</directory>
            </resource>
            <resource>
                <directory>src/main/java</directory>
                <!--配置了要包含的src/main/java的xml-->
                <includes>
                    <include>**/*.xml</include>
                </includes>
            </resource>
        </resources>
        <plugins>
            <!-- 跳过测试用例 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
            </plugin>
            <!--生成项目源代码和资源的 JAR 包的插件 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-source-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>